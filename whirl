#!/usr/bin/env bash
AIRFLOW_UI_PORT=5000
SCRIPT_DIR=$( dirname ${BASH_SOURCE[0]} )

# load and export environment variables
# priority order:
#     .whirl.env in home directory
#     .whirl.env in whirl repository directory
#     .whirl.env in environment directory
#     .whirl.env in dag directory
function export_environment_vars() {
  set -a
  DOCKER_CONTEXT_FOLDER=${SCRIPT_DIR}/docker
  DAG_FOLDER=$(pwd)
  PROJECTNAME=$(basename ${DAG_FOLDER})
  WHIRL_INITIATOR=$(whoami)
  WHIRL_SETUP_FOLDER=/etc/airflow/whirl.setup.d

  if [ -f ~/.whirl.env ]; then
    echo "Reading configuration from ~/.whirl.env"
    . ~/.whirl.env
  fi
  if [ -f ${SCRIPT_DIR}/.whirl.env ]; then
    echo "Reading configuration from ${SCRIPT_DIR}/.whirl.env"
    . ${SCRIPT_DIR}/.whirl.env
  fi

  # determine whether to use the environment set at the commandline or
  # in the DAG FOLDER .whirl.env
  if [ -z "${WHIRL_ENVIRONMENT_ARG}" ]; then
    if [ -f ${DAG_FOLDER}/.whirl.env ]; then
      if grep -qRE "^(\s+)?WHIRL_ENVIRONMENT=(.*)" "${DAG_FOLDER}/.whirl.env"; then
          echo "Found WHIRL_ENVIRONMENT in ${DAG_FOLDER}/.whirl.env";
          WHIRL_ENVIRONMENT=$(grep -oRE "^(\s+)?WHIRL_ENVIRONMENT=(.*)" "${DAG_FOLDER}/.whirl.env" | \
                              sed -e 's/.*=\(.*\)/\1/g')
      fi
    fi
  else
    WHIRL_ENVIRONMENT=${WHIRL_ENVIRONMENT_ARG}
  fi

  ENVIRONMENT_FOLDER=${SCRIPT_DIR}/envs/${WHIRL_ENVIRONMENT}

  if [[ -z "${WHIRL_ENVIRONMENT}" || ! -d ${ENVIRONMENT_FOLDER} ]]; then
    echo "No valid environment '${WHIRL_ENVIRONMENT}' specified"
    exit 2;
  fi

  if [ -f "${ENVIRONMENT_FOLDER}/.whirl.env" ]; then
    echo "Reading configuration from ${ENVIRONMENT_FOLDER}/.whirl.env"
    . "${ENVIRONMENT_FOLDER}/.whirl.env"
  fi

  if [ -f "${DAG_FOLDER}/.whirl.env" ]; then
    echo "Reading configuration from ${DAG_FOLDER}/.whirl.env"
    . "${DAG_FOLDER}/.whirl.env"
  fi

  # in case DAG_FOLDER specifies WHIRL_ENVIRONMENT, commandline needs to overrule if set
  if [[ ! -z "${WHIRL_ENVIRONMENT_ARG}" ]]; then
    WHIRL_ENVIRONMENT=${WHIRL_ENVIRONMENT_ARG}
  fi
  set +a
}

detect_potential_dag() {
  test `find . -type f -name '*.py' -o -name '*.zip' | wc -l` -gt 0
}

test_dag_state() {
  local ARG=$1
  result=$(curl -s "http://localhost:${AIRFLOW_UI_PORT}/admin/airflow/dag_stats" | \
           jq ".[][] | select(.state == \"${ARG}\") | .count")
  echo "$result"
}

start() {
    echo "Starting airflow local run for environment ${WHIRL_ENVIRONMENT}"

    docker build --build-arg PYTHON_VERSION=${PYTHON_VERSION} -t docker-whirl-airflow:py-${PYTHON_VERSION}-local "${SCRIPT_DIR}/docker/airflow"

    DAEMON=""
    if [ "${CI_MODE}" == true ]; then
      DAEMON="-d"
      export UNPAUSE_DAG=true
    fi

    docker-compose -f "${ENVIRONMENT_FOLDER}/docker-compose.yml" up ${DAEMON} --build

    if [ "${CI_MODE}" == true ]; then
      while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:${AIRFLOW_UI_PORT})" != "302" ]]; do
        echo "Waiting for Airflow UI to come up..."
        sleep 10;
      done
      while [ $(test_dag_state "running") -gt 0 ]; do
        echo "Dag is (still) running..."
        sleep 5;
      done
      if [ $(test_dag_state "success") -eq 1 ]; then
        echo "Dag successfully finished"
        stop
        exit 0
      fi
      if [ $(test_dag_state "failed") -eq 1 ]; then
        echo "Dag run failed"
        if [ "$STOP_ON_FAILURE" = true ]; then
          stop
          exit 1
        fi
      fi
    fi
}

stop() {
  echo "Stopping airflow-localrun containers..."
  docker-compose -f "${SCRIPT_DIR}/envs/${WHIRL_ENVIRONMENT}/docker-compose.yml" down --volumes
}

usage() {
  echo "usage: ${BASH_SOURCE[0]} [-h|--help] [-e|--environment env] [start|stop|ci]"
  echo "  -h|--help                          display usage"
  echo "  -e|--environment environment       specify environment to use"
  echo "  start|stop                         start or stop all"
  echo "  ci                                 runs in daemonized mode and awaits dag run completion"
  exit 1
}

function read_arguments() {
  while [[ $# -gt 0 ]]
  do
      key="${1}"
      case ${key} in
      -e|--environment)
          WHIRL_ENVIRONMENT_ARG="${2}"
          shift # past argument
          shift # past value
          ;;
      start)
          CI_MODE=false
          shift
          ;;
      ci)
          CI_MODE=true
          shift # past argument
          ;;
      stop)
          STOP=true
          shift # past argument
          ;;
      -h|--help)
          usage
          ;;
      *)  # unknown option
          echo "WARNING: Skipping unknown commandline argument: '${key}'"
          shift # past argument
          ;;
      esac
  done
}

function main() {
  read_arguments "$@"

  if detect_potential_dag; then
    export_environment_vars

    if [ -z "${STOP}" ]; then
      start
    else
      stop
    fi
  else
    echo "No .py or .zip files found that may contain an Apache Airflow DAG"
  fi
}

main "$@"

